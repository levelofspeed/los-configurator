import streamlit as st

# Configure page
st.set_page_config(
    page_title="Level of Speed Configurator",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

import pandas as pd
import matplotlib.pyplot as plt

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
@st.cache_data
def load_data():
    return pd.read_excel("configurator_template_fixed.xlsx")

df = load_data()

st.title("üîß Level of Speed Configurator")

# –®–∞–≥ 1: –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞
brands = sorted(df['Brand'].unique())
brand = st.sidebar.selectbox("üìã Select Brand", [""] + brands)
if not brand:
    st.info("üëâ Please select a Brand to continue")
else:
    # –®–∞–≥ 2: –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    models = sorted(df[df['Brand'] == brand]['Model'].unique())
    model = st.sidebar.selectbox("üìã Select Model", [""] + models)
    if not model:
        st.info("üëâ Please select a Model to continue")
    else:
        # –®–∞–≥ 3: –≤—ã–±–æ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
        gens = df[(df['Brand'] == brand) & (df['Model'] == model)]
        generations = sorted(gens['Generation'].unique())
        generation = st.sidebar.selectbox("üìã Select Generation", [""] + generations)
        if not generation:
            st.info("üëâ Please select a Generation to continue")
        else:
            # –®–∞–≥ 4: –≤—ã–±–æ—Ä —Ç–æ–ø–ª–∏–≤–∞
            fuels = sorted(gens[gens['Generation'] == generation]['Fuel'].unique())
            fuel = st.sidebar.selectbox("üìã Select Fuel", [""] + fuels)
            if not fuel:
                st.info("üëâ Please select a Fuel to continue")
            else:
                # –®–∞–≥ 5: –≤—ã–±–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è
                subset = gens[(gens['Generation'] == generation) & (gens['Fuel'] == fuel)]
                engines = sorted(subset['Engine'].unique())
                engine = st.sidebar.selectbox("üìã Select Engine", [""] + engines)
                if not engine:
                    st.info("üëâ Please select an Engine to continue")
                else:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
                    spec = subset[subset['Engine'] == engine].iloc[0]

                    st.subheader("üîç Tuning Results")
                    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    result_df = pd.DataFrame({
                        'Metric': ['HP', 'Torque'],
                        'Original': [spec['Original HP'], spec['Original Torque']],
                        'Tuned': [spec['Tuned HP'], spec['Tuned Torque']]
                    }).set_index('Metric')
                    st.table(result_df)

                    # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—Ä–æ—Å—Ç–∞
                    st.subheader("üìà Performance Comparison")
                    st.bar_chart(result_df)

                    # –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    st.subheader("üì® Request a Callback")
                    with st.form(key='callback_form'):
                        customer_name = st.text_input("Your Name")
                        customer_email = st.text_input("Your Email")
                        submit_button = st.form_submit_button(label='Submit Request')
                    if submit_button:
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
                        st.success(f"Thank you, {customer_name}! We will contact you at {customer_email} soon.")
