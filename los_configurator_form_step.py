import streamlit as st
import matplotlib.pyplot as plt
import json
import os
import traceback
from datetime import datetime

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ============================================
if 'app' not in st.session_state:
    st.session_state.app = {
        'stage': 1,  # 1=–≤—ã–±–æ—Ä –∞–≤—Ç–æ, 2=—Ç—é–Ω–∏–Ω–≥, 3=—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        'vehicle': None,
        'tuning': None,
        'last_error': None
    }

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π ================================================
@st.cache_data
def load_database():
    try:
        with open('data/full_database.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.session_state.app['last_error'] = {
            'time': datetime.now().strftime("%H:%M:%S"),
            'error': str(e),
            'trace': traceback.format_exc()
        }
        return None

database = load_database()

# 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ ======================================================
def show_errors():
    if st.session_state.app['last_error']:
        err = st.session_state.app['last_error']
        with st.expander("‚ùå –û—à–∏–±–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π)", expanded=False):
            st.error(f"**–í—Ä–µ–º—è:** {err['time']}")
            st.code(f"–û—à–∏–±–∫–∞: {err['error']}\n\n{err['trace']}")
        if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
            st.session_state.app['last_error'] = None
            st.rerun()

# 4. –®–∞–≥ 1: –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è ==================================================
def render_vehicle_selection():
    st.header("üîß –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    
    try:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not database:
            st.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return

        cols = st.columns(3)
        
        # –í—ã–±–æ—Ä –º–∞—Ä–∫–∏
        with cols[0]:
            brands = sorted(database.keys())
            brand = st.selectbox("–ú–∞—Ä–∫–∞", [''] + brands, key='brand')
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        with cols[1]:
            models = []
            if brand:
                models = sorted(database[brand].keys())
            model = st.selectbox("–ú–æ–¥–µ–ª—å", [''] + models, key='model')
        
        # –í—ã–±–æ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
        with cols[2]:
            generations = []
            if brand and model:
                generations = sorted(database[brand][model].keys())
            generation = st.selectbox("–ü–æ–∫–æ–ª–µ–Ω–∏–µ", [''] + generations, key='generation')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if brand and model and generation:
            engines_data = database[brand][model][generation]
            
            # –í—ã–±–æ—Ä —Ç–æ–ø–ª–∏–≤–∞
            fuels = sorted({e.get('Type') for e in engines_data.values() 
                          if isinstance(e, dict)})
            fuel = st.selectbox("–¢–æ–ø–ª–∏–≤–æ", [''] + fuels, key='fuel')
            
            # –í—ã–±–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è
            if fuel:
                engines = [k for k, v in engines_data.items() 
                         if isinstance(v, dict) and v.get('Type') == fuel]
                engine = st.selectbox("–î–≤–∏–≥–∞—Ç–µ–ª—å", [''] + engines, key='engine')
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
                if engine:
                    st.session_state.app['vehicle'] = {
                        'brand': brand,
                        'model': model,
                        'generation': generation,
                        'fuel': fuel,
                        'engine': engine,
                        'specs': engines_data[engine]
                    }
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        if st.session_state.app['vehicle']:
            if st.button("–î–∞–ª–µ–µ ‚Üí", key='to_step_2'):
                st.session_state.app['stage'] = 2
                st.rerun()

    except Exception as e:
        st.session_state.app['last_error'] = {
            'time': datetime.now().strftime("%H:%M:%S"),
            'error': str(e),
            'trace': traceback.format_exc()
        }
        st.rerun()

# 5. –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—é–Ω–∏–Ω–≥–∞ =================================================
def render_tuning_config():
    st.header("‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—é–Ω–∏–Ω–≥–∞")
    
    try:
        vehicle = st.session_state.app['vehicle']
        st.success(f"–í—ã–±—Ä–∞–Ω: {vehicle['brand']} {vehicle['model']} ({vehicle['engine']})")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—é–Ω–∏–Ω–≥–∞
        tuning_type = st.radio(
            "–¢–∏–ø —Ç—é–Ω–∏–Ω–≥–∞",
            ["–¢–æ–ª—å–∫–æ –º–æ—â–Ω–æ—Å—Ç—å", "–¢–æ–ª—å–∫–æ –æ–ø—Ü–∏–∏", "–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç"],
            index=0,
            key='tuning_type'
        )
        
        # –í—ã–±–æ—Ä –æ–ø—Ü–∏–π
        selected_options = []
        if "–æ–ø—Ü–∏–∏" in tuning_type.lower():
            options = vehicle['specs'].get('Options', [])
            selected_options = st.multiselect(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏",
                options,
                key='tuning_options'
            )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        st.session_state.app['tuning'] = {
            'type': tuning_type,
            'options': selected_options
        }
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚Üê –ù–∞–∑–∞–¥", key='back_to_step_1'):
                st.session_state.app['stage'] = 1
                st.rerun()
        with col2:
            if st.button("–î–∞–ª–µ–µ ‚Üí", key='to_step_3'):
                st.session_state.app['stage'] = 3
                st.rerun()

    except Exception as e:
        st.session_state.app['last_error'] = {
            'time': datetime.now().strftime("%H:%M:%S"),
            'error': str(e),
            'trace': traceback.format_exc()
        }
        st.rerun()

# 6. –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ========================================================
def render_results():
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    try:
        vehicle = st.session_state.app['vehicle']
        tuning = st.session_state.app['tuning']
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig, ax = plt.subplots(figsize=(10, 5))
        specs = vehicle['specs']
        
        ax.bar(
            ['–°—Ç–æ–∫', '–¢—é–Ω–∏–Ω–≥'],
            [specs['Original HP'], specs['Tuned HP']],
            color=['gray', 'red']
        )
        ax.set_ylabel('–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)')
        st.pyplot(fig)
        plt.close(fig)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ
        st.write(f"**–¢–∏–ø —Ç—é–Ω–∏–Ω–≥–∞:** {tuning['type']}")
        if tuning['options']:
            st.write("**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:**")
            for opt in tuning['options']:
                st.write(f"- {opt}")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", key='restart'):
            st.session_state.app = {
                'stage': 1,
                'vehicle': None,
                'tuning': None,
                'last_error': None
            }
            st.rerun()

    except Exception as e:
        st.session_state.app['last_error'] = {
            'time': datetime.now().strftime("%H:%M:%S"),
            'error': str(e),
            'trace': traceback.format_exc()
        }
        st.rerun()

# 7. –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ========================================================
def main():
    show_errors()
    
    if not database:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return
    
    if st.session_state.app['stage'] == 1:
        render_vehicle_selection()
    elif st.session_state.app['stage'] == 2:
        render_tuning_config()
    elif st.session_state.app['stage'] == 3:
        render_results()

if __name__ == "__main__":
    main()
