import streamlit as st
import json
from pathlib import Path

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).parent
DATA_FILE = BASE_DIR / "data" / "full_database.json"
LOGO_FILE = BASE_DIR / "static" / "logo_white.png"

# 2. –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π
@st.cache_data
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            filtered = {}
            for brand, models in data.items():
                if not models: continue
                filtered[brand] = {}
                for model, gens in models.items():
                    if not gens: continue
                    filtered[brand][model] = {}
                    for gen, engines in gens.items():
                        if not engines: continue
                        filtered[brand][model][gen] = {
                            engine: specs for engine, specs in engines.items() 
                            if specs and isinstance(specs, dict)
                        }
            return filtered
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return {}

# 3. –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
def main():
    st.set_page_config(page_title="Level of Speed Configurator", layout="wide")
    
    # –õ–æ–≥–æ—Ç–∏–ø (—Å –∑–∞—â–∏—Ç–æ–π)
    try:
        if LOGO_FILE.exists():
            st.image(str(LOGO_FILE), use_column_width=True)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø: {str(e)}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    db = load_data()
    if not db:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        st.stop()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "stage" not in st.session_state:
        st.session_state.update({
            "stage": 1,
            "vehicle": None,
            "tuning": None
        })

    # –®–∞–≥ 1: –í—ã–±–æ—Ä –∞–≤—Ç–æ (—Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π)
    if st.session_state.stage == 1:
        st.header("üîß –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        
        try:
            # –í—ã–±–æ—Ä –º–∞—Ä–∫–∏
            brands = sorted(db.keys())
            if not brands:
                st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä–æ–∫")
                st.stop()
            
            brand = st.selectbox("–ú–∞—Ä–∫–∞", brands, index=0)
            
            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            models = sorted(db[brand].keys()) if brand else []
            if not models:
                st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏")
                st.stop()
            
            model = st.selectbox("–ú–æ–¥–µ–ª—å", models, index=0)
            
            # –í—ã–±–æ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
            gens = sorted(db[brand][model].keys()) if model else []
            if not gens:
                st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
                st.stop()
            
            gen = st.selectbox("–ü–æ–∫–æ–ª–µ–Ω–∏–µ", gens, index=0)
            
            # –í—ã–±–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è
            engines = sorted(db[brand][model][gen].keys()) if gen else []
            if not engines:
                st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è")
                st.stop()
            
            engine = st.selectbox("–î–≤–∏–≥–∞—Ç–µ–ª—å", engines, index=0)
            
            if engine and st.button("–î–∞–ª–µ–µ ‚Üí"):
                st.session_state.vehicle = {
                    "brand": brand,
                    "model": model,
                    "generation": gen,
                    "engine": engine,
                    "specs": db[brand][model][gen][engine]
                }
                st.session_state.stage = 2
                st.rerun()
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}")
            st.stop()

    # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—é–Ω–∏–Ω–≥–∞
    elif st.session_state.stage == 2:
        try:
            v = st.session_state.vehicle
            st.header(f"‚ö° {v['brand']} {v['model']} ({v['engine']})")
            
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—é–Ω–∏–Ω–≥–∞
            tuning_type = st.radio(
                "–¢–∏–ø —Ç—é–Ω–∏–Ω–≥–∞",
                ["–¢–æ–ª—å–∫–æ –º–æ—â–Ω–æ—Å—Ç—å", "–¢–æ–ª—å–∫–æ –æ–ø—Ü–∏–∏", "–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç"],
                index=0
            )
            
            # –í—ã–±–æ—Ä –æ–ø—Ü–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            options = []
            if "–æ–ø—Ü–∏–∏" in tuning_type.lower():
                available_options = v["specs"].get("Options", [])
                if available_options:
                    options = st.multiselect("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏", available_options)
                else:
                    st.warning("–î–ª—è —ç—Ç–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚Üê –ù–∞–∑–∞–¥"):
                    st.session_state.stage = 1
                    st.rerun()
            with col2:
                if st.button("–î–∞–ª–µ–µ ‚Üí"):
                    st.session_state.tuning = {
                        "type": tuning_type,
                        "options": options
                    }
                    st.session_state.stage = 3
                    st.rerun()
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç—é–Ω–∏–Ω–≥–∞: {str(e)}")
            st.stop()

    # –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    elif st.session_state.stage == 3:
        try:
            v = st.session_state.vehicle
            t = st.session_state.tuning
            
            st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            st.subheader(f"{v['brand']} {v['model']} {v['generation']}")
            st.write(f"**–î–≤–∏–≥–∞—Ç–µ–ª—å:** {v['engine']}")
            st.write(f"**–¢–∏–ø —Ç—é–Ω–∏–Ω–≥–∞:** {t['type']}")
            
            if t["options"]:
                st.write("**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:**")
                for opt in t["options"]:
                    st.write(f"- {opt}")
            else:
                st.write("**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:** –ù–µ—Ç")
            
            st.divider()
            st.write(f"**–ú–æ—â–Ω–æ—Å—Ç—å:** {v['specs']['Original HP']} ‚Üí {v['specs']['Tuned HP']} –ª.—Å.")
            st.write(f"**–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç:** {v['specs']['Original Torque']} ‚Üí {v['specs']['Tuned Torque']} –ù–º")
            
            if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="primary"):
                st.session_state.clear()
                st.rerun()
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
            st.stop()

if __name__ == "__main__":
    main()
